import Chai from 'chai';
import { Nodes } from '@robinblomberg/sqlite-ast';
import { tokenize } from './tokenize.js';
import * as Tokens from './tokens.js';

describe('@robinblomberg/sqlite-compiler', () => {
  describe('.tokenize', () => {
    describe('AggregateFunctionInvocation', () => {
      it('aggregate-func(DISTINCT [expr])', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.AggregateFunctionInvocation(
              Nodes._Identifier('aggregate-func'),
              Nodes._AggregateArgs(
                true,
                [
                  Nodes._Identifier('expr')
                ]
              ),
              null
            )
          ),
          [
            Tokens.Identifier('aggregate-func'),
            Tokens.Punctuator('('),
            Tokens.Keyword('DISTINCT'),
            Tokens.Identifier('expr'),
            Tokens.Punctuator(')')
          ]
        );
      });

      it('aggregate-func([expr1], [expr2])', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.AggregateFunctionInvocation(
              Nodes._Identifier('aggregate-func'),
              Nodes._AggregateArgs(
                false,
                [
                  Nodes._Identifier('expr1'),
                  Nodes._Identifier('expr2')
                ]
              ),
              null
            )
          ),
          [
            Tokens.Identifier('aggregate-func'),
            Tokens.Punctuator('('),
            Tokens.Identifier('expr1'),
            Tokens.Punctuator(','),
            Tokens.Identifier('expr2'),
            Tokens.Punctuator(')')
          ]
        );
      });

      it('aggregate-func(*)', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.AggregateFunctionInvocation(
              Nodes._Identifier('aggregate-func'),
              '*',
              null
            )
          ),
          [
            Tokens.Identifier('aggregate-func'),
            Tokens.Punctuator('('),
            Tokens.Punctuator('*'),
            Tokens.Punctuator(')')
          ]
        );
      });

      it('aggregate-func()', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.AggregateFunctionInvocation(
              Nodes._Identifier('aggregate-func'),
              null,
              null
            )
          ),
          [
            Tokens.Identifier('aggregate-func'),
            Tokens.Punctuator('('),
            Tokens.Punctuator(')')
          ]
        );
      });

      it('aggregate-func(DISTINCT [expr]) [filter-clause]', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.AggregateFunctionInvocation(
              Nodes._Identifier('aggregate-func'),
              Nodes._AggregateArgs(
                true,
                [
                  Nodes._Identifier('expr')
                ]
              ),
              Nodes.FilterClause(
                Nodes._BinaryExpression(
                  Nodes._ColumnPath(
                    Nodes._Identifier('table-name'),
                    Nodes._Identifier('column-name')
                  ),
                  '>',
                  Nodes._NumericLiteral(30)
                )
              )
            )
          ),
          [
            Tokens.Identifier('aggregate-func'),
            Tokens.Punctuator('('),
            Tokens.Keyword('DISTINCT'),
            Tokens.Identifier('expr'),
            Tokens.Punctuator(')'),
            Tokens.Keyword('FILTER'),
            Tokens.Punctuator('('),
            Tokens.Keyword('WHERE'),
            Tokens.Identifier('table-name'),
            Tokens.Punctuator('.'),
            Tokens.Identifier('column-name'),
            Tokens.Punctuator('>'),
            Tokens.Numeric('30'),
            Tokens.Punctuator(')')
          ]
        );
      });
    });

    describe('AlterTableStmt', () => {
      it('ALTER TABLE schema-name.table-name RENAME TO new-table-name', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.AlterTableStmt(
              Nodes._Path(
                Nodes._Identifier('schema-name'),
                Nodes._Identifier('table-name')
              ),
              Nodes._RenameClause(
                null,
                Nodes._Identifier('new-table-name')
              )
            )
          ),
          [
            Tokens.Keyword('ALTER'),
            Tokens.Keyword('TABLE'),
            Tokens.Identifier('schema-name'),
            Tokens.Punctuator('.'),
            Tokens.Identifier('table-name'),
            Tokens.Keyword('RENAME'),
            Tokens.Keyword('TO'),
            Tokens.Identifier('new-table-name')
          ]
        );
      });

      it('ALTER TABLE table-name RENAME column-name TO new-table-name', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.AlterTableStmt(
              Nodes._Identifier('table-name'),
              Nodes._RenameClause(
                Nodes._Identifier('column-name'),
                Nodes._Identifier('new-table-name')
              )
            )
          ),
          [
            Tokens.Keyword('ALTER'),
            Tokens.Keyword('TABLE'),
            Tokens.Identifier('table-name'),
            Tokens.Keyword('RENAME'),
            Tokens.Identifier('column-name'),
            Tokens.Keyword('TO'),
            Tokens.Identifier('new-table-name')
          ]
        );
      });

      it('ALTER TABLE table-name ADD [column-def]', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.AlterTableStmt(
              Nodes._Identifier('table-name'),
              Nodes._AddClause(
                Nodes.ColumnDef(
                  Nodes._Identifier('column-name'),
                  Nodes.TypeName(
                    [
                      'VARCHAR'
                    ],
                    []
                  ),
                  [
                    Nodes.ColumnConstraint(
                      null,
                      Nodes._NotNullClause(null)
                    )
                  ]
                )
              )
            )
          ),
          [
            Tokens.Keyword('ALTER'),
            Tokens.Keyword('TABLE'),
            Tokens.Identifier('table-name'),
            Tokens.Keyword('ADD'),
            Tokens.Identifier('column-name'),
            Tokens.Keyword('VARCHAR'),
            Tokens.Keyword('NOT'),
            Tokens.Keyword('NULL')
          ]
        );
      });
    });

    describe('AnalyzeStmt', () => {
      it('ANALYZE', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.AnalyzeStmt(null)
          ),
          [
            Tokens.Keyword('ANALYZE')
          ]
        );
      });

      it('ANALYZE schema-name', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.AnalyzeStmt(
              Nodes._Identifier('schema-name')
            )
          ),
          [
            Tokens.Keyword('ANALYZE'),
            Tokens.Identifier('schema-name')
          ]
        );
      });

      it('ANALYZE index-or-table-name', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.AnalyzeStmt(
              Nodes._Identifier('index-or-table-name')
            )
          ),
          [
            Tokens.Keyword('ANALYZE'),
            Tokens.Identifier('index-or-table-name')
          ]
        );
      });

      it('ANALYZE schema-name.table-or-index-name', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.AnalyzeStmt(
              Nodes._Path(
                Nodes._Identifier('schema-name'),
                Nodes._Identifier('table-or-index-name')
              )
            )
          ),
          [
            Tokens.Keyword('ANALYZE'),
            Tokens.Identifier('schema-name'),
            Tokens.Punctuator('.'),
            Tokens.Identifier('table-or-index-name')
          ]
        );
      });
    });

    describe('AttachStmt', () => {
      it('ATTACH [expr] AS schema-name', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.AttachStmt(
              Nodes._StringLiteral('c:\\sqlite\\db\\contacts.db'),
              Nodes._Identifier('schema-name')
            )
          ),
          [
            Tokens.Keyword('ATTACH'),
            Tokens.String('\'c:\\\\sqlite\\\\db\\\\contacts.db\''),
            Tokens.Keyword('AS'),
            Tokens.Identifier('schema-name')
          ]
        );
      });
    });

    describe('BeginStmt', () => {
      it('BEGIN', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.BeginStmt(null)
          ),
          [
            Tokens.Keyword('BEGIN')
          ]
        );
      });

      it('BEGIN DEFERRED', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.BeginStmt('DEFERRED')
          ),
          [
            Tokens.Keyword('BEGIN'),
            Tokens.Keyword('DEFERRED')
          ]
        );
      });

      it('BEGIN IMMEDIATE', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.BeginStmt('IMMEDIATE')
          ),
          [
            Tokens.Keyword('BEGIN'),
            Tokens.Keyword('IMMEDIATE')
          ]
        );
      });

      it('BEGIN EXCLUSIVE', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.BeginStmt('EXCLUSIVE')
          ),
          [
            Tokens.Keyword('BEGIN'),
            Tokens.Keyword('EXCLUSIVE')
          ]
        );
      });
    });

    describe('ColumnConstraint', () => {
      it('PRIMARY KEY', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.ColumnConstraint(
              null,
              Nodes._PrimaryKeyClause(
                null,
                null,
                false
              )
            )
          ),
          [
            Tokens.Keyword('PRIMARY'),
            Tokens.Keyword('KEY')
          ]
        );
      });

      it('CONSTRAINT name PRIMARY KEY ASC/DESC [conflict-clause] AUTOINCREMENT', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.ColumnConstraint(
              Nodes._Identifier('name'),
              Nodes._PrimaryKeyClause(
                'ASC',
                Nodes.ConflictClause('FAIL'),
                true
              )
            )
          ),
          [
            Tokens.Keyword('CONSTRAINT'),
            Tokens.Identifier('name'),
            Tokens.Keyword('PRIMARY'),
            Tokens.Keyword('KEY'),
            Tokens.Keyword('ASC'),
            Tokens.Keyword('ON'),
            Tokens.Keyword('CONFLICT'),
            Tokens.Keyword('FAIL'),
            Tokens.Keyword('AUTOINCREMENT')
          ]
        );
      });

      it('NOT NULL [conflict-clause]', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.ColumnConstraint(
              null,
              Nodes._NotNullClause(null)
            )
          ),
          [
            Tokens.Keyword('NOT'),
            Tokens.Keyword('NULL')
          ]
        );
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.ColumnConstraint(
              null,
              Nodes._NotNullClause(
                Nodes.ConflictClause('ROLLBACK')
              )
            )
          ),
          [
            Tokens.Keyword('NOT'),
            Tokens.Keyword('NULL'),
            Tokens.Keyword('ON'),
            Tokens.Keyword('CONFLICT'),
            Tokens.Keyword('ROLLBACK')
          ]
        );
      });

      it('UNIQUE [conflict-clause]', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.ColumnConstraint(
              null,
              Nodes._UniqueClause(null)
            )
          ),
          [
            Tokens.Keyword('UNIQUE')
          ]
        );
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.ColumnConstraint(
              null,
              Nodes._UniqueClause(
                Nodes.ConflictClause('ABORT')
              )
            )
          ),
          [
            Tokens.Keyword('UNIQUE'),
            Tokens.Keyword('ON'),
            Tokens.Keyword('CONFLICT'),
            Tokens.Keyword('ABORT')
          ]
        );
      });

      it('CHECK ([expr])', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.ColumnConstraint(
              null,
              Nodes._CheckClause(
                Nodes._BinaryExpression(
                  Nodes._Identifier('email'),
                  'LIKE',
                  Nodes._StringLiteral(
                    '%er'
                  )
                )
              )
            )
          ),
          [
            Tokens.Keyword('CHECK'),
            Tokens.Punctuator('('),
            Tokens.Identifier('email'),
            Tokens.Keyword('LIKE'),
            Tokens.String('\'%er\''),
            Tokens.Punctuator(')')
          ]
        );
      });

      it('DEFAULT ([expr])', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.ColumnConstraint(
              null,
              Nodes._DefaultClause(
                Nodes._BinaryExpression(
                  Nodes._CallExpression(
                    Nodes._Identifier('round'),
                    [
                      Nodes._CallExpression(
                        Nodes._Identifier('julianday'),
                        [
                          Nodes._StringLiteral('now')
                        ],
                        null,
                        null
                      )
                    ],
                    null,
                    null
                  ),
                  '+',
                  Nodes._NumericLiteral(10.5)
                )
              )
            )
          ),
          [
            Tokens.Keyword('DEFAULT'),
            Tokens.Punctuator('('),
            Tokens.Identifier('round'),
            Tokens.Punctuator('('),
            Tokens.Identifier('julianday'),
            Tokens.Punctuator('('),
            Tokens.String('\'now\''),
            Tokens.Punctuator(')'),
            Tokens.Punctuator(')'),
            Tokens.Punctuator('+'),
            Tokens.Numeric('10.5'),
            Tokens.Punctuator(')')
          ]
        );
      });

      it('DEFAULT [literal-value]', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.ColumnConstraint(
              null,
              Nodes._DefaultClause(
                Nodes._StringLiteral('literal-value')
              )
            )
          ),
          [
            Tokens.Keyword('DEFAULT'),
            Tokens.String('\'literal-value\'')
          ]
        );
      });

      it('DEFAULT [signed-number]', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.ColumnConstraint(
              null,
              Nodes._DefaultClause(
                Nodes._NumericLiteral(100)
              )
            )
          ),
          [
            Tokens.Keyword('DEFAULT'),
            Tokens.Numeric('100')
          ]
        );
      });

      it('COLLATE collation-name', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.ColumnConstraint(
              null,
              Nodes._CollateClause(
                Nodes._Identifier('NOCASE')
              )
            )
          ),
          [
            Tokens.Keyword('COLLATE'),
            Tokens.Identifier('NOCASE')
          ]
        );
      });

      it('[foreign-key-clause]', () => {
        // See "ForeignKeyClause".
      });

      it('GENERATED ALWAYS AS ([expr])', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.ColumnConstraint(
              null,
              Nodes._AsClause(
                true,
                Nodes._Identifier('expr'),
                null
              )
            )
          ),
          [
            Tokens.Keyword('GENERATED'),
            Tokens.Keyword('ALWAYS'),
            Tokens.Keyword('AS'),
            Tokens.Punctuator('('),
            Tokens.Identifier('expr'),
            Tokens.Punctuator(')')
          ]
        );
      });

      it('GENERATED ALWAYS AS ([expr]) STORED/VIRTUAL', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.ColumnConstraint(
              null,
              Nodes._AsClause(
                true,
                Nodes._Identifier('expr'),
                'STORED'
              )
            )
          ),
          [
            Tokens.Keyword('GENERATED'),
            Tokens.Keyword('ALWAYS'),
            Tokens.Keyword('AS'),
            Tokens.Punctuator('('),
            Tokens.Identifier('expr'),
            Tokens.Punctuator(')'),
            Tokens.Keyword('STORED')
          ]
        );
      });

      it('AS ([expr]) STORED/VIRTUAL', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.ColumnConstraint(
              null,
              Nodes._AsClause(
                false,
                Nodes._Identifier('expr'),
                'VIRTUAL'
              )
            )
          ),
          [
            Tokens.Keyword('AS'),
            Tokens.Punctuator('('),
            Tokens.Identifier('expr'),
            Tokens.Punctuator(')'),
            Tokens.Keyword('VIRTUAL')
          ]
        );
      });
    });

    describe('ColumnDef', () => {
      it('column-name', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.ColumnDef(
              Nodes._Identifier('column-name'),
              null,
              []
            )
          ),
          [
            Tokens.Identifier('column-name')
          ]
        );
      });

      it('column-name [column-constraint]', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.ColumnDef(
              Nodes._Identifier('column-name'),
              null,
              [
                Nodes.ColumnConstraint(
                  null,
                  Nodes._NotNullClause(null)
                )
              ]
            )
          ),
          [
            Tokens.Identifier('column-name'),
            Tokens.Keyword('NOT'),
            Tokens.Keyword('NULL')
          ]
        );
      });

      it('column-name [column-constraint] [column-constraint]', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.ColumnDef(
              Nodes._Identifier('column-name'),
              null,
              [
                Nodes.ColumnConstraint(
                  null,
                  Nodes._NotNullClause(null)
                ),
                Nodes.ColumnConstraint(
                  null,
                  Nodes._CheckClause(
                    Nodes._BinaryExpression(
                      Nodes._Identifier('column-name'),
                      '<',
                      Nodes._NumericLiteral(100)
                    )
                  )
                )
              ]
            )
          ),
          [
            Tokens.Identifier('column-name'),
            Tokens.Keyword('NOT'),
            Tokens.Keyword('NULL'),
            Tokens.Keyword('CHECK'),
            Tokens.Punctuator('('),
            Tokens.Identifier('column-name'),
            Tokens.Punctuator('<'),
            Tokens.Numeric('100'),
            Tokens.Punctuator(')')
          ]
        );
      });

      it('column-name [type-name]', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.ColumnDef(
              Nodes._Identifier('column-name'),
              Nodes.TypeName(
                [
                  'CHARACTER',
                  'VARYING'
                ],
                [
                  Nodes._NumericLiteral(255)
                ]
              ),
              []
            )
          ),
          [
            Tokens.Identifier('column-name'),
            Tokens.Keyword('CHARACTER'),
            Tokens.Keyword('VARYING'),
            Tokens.Punctuator('('),
            Tokens.Numeric('255'),
            Tokens.Punctuator(')')
          ]
        );
      });
    });

    describe('ColumnNameList', () => {
      it('(column-name)', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.ColumnNameList(
              [
                Nodes._Identifier('column-name')
              ]
            )
          ),
          [
            Tokens.Punctuator('('),
            Tokens.Identifier('column-name'),
            Tokens.Punctuator(')')
          ]
        );
      });

      it('(column-name1, column-name2)', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.ColumnNameList(
              [
                Nodes._Identifier('column-name1'),
                Nodes._Identifier('column-name2')
              ]
            )
          ),
          [
            Tokens.Punctuator('('),
            Tokens.Identifier('column-name1'),
            Tokens.Punctuator(','),
            Tokens.Identifier('column-name2'),
            Tokens.Punctuator(')')
          ]
        );
      });
    });

    describe('CommitStmt', () => {
      it('COMMIT', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.CommitStmt()
          ),
          [
            Tokens.Keyword('COMMIT')
          ]
        );
      });
    });

    describe('CommonTableExpression', () => {
      it('table-name AS ([select-stmt])', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.CommonTableExpression(
              Nodes.CteTableName(
                Nodes._Identifier('table-name'),
                []
              ),
              Nodes.SelectStmt(
                null,
                [
                  Nodes._SelectClause(
                    null,
                    [
                      Nodes.ResultColumn(
                        Nodes._Identifier('result-column')
                      )
                    ],
                    null,
                    null,
                    null,
                    []
                  )
                ],
                null
              )
            )
          ),
          [
            Tokens.Identifier('table-name'),
            Tokens.Keyword('AS'),
            Tokens.Punctuator('('),
            Tokens.Keyword('SELECT'),
            Tokens.Identifier('result-column'),
            Tokens.Punctuator(')')
          ]
        );
      });

      it('table-name(column-name) AS ([select-stmt])', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.CommonTableExpression(
              Nodes.CteTableName(
                Nodes._Identifier('table-name'),
                [
                  Nodes._Identifier('column-name')
                ]
              ),
              Nodes.SelectStmt(
                null,
                [
                  Nodes._SelectClause(
                    null,
                    [
                      Nodes.ResultColumn(
                        Nodes._Identifier('result-column')
                      )
                    ],
                    null,
                    null,
                    null,
                    []
                  )
                ],
                null
              )
            )
          ),
          [
            Tokens.Identifier('table-name'),
            Tokens.Punctuator('('),
            Tokens.Identifier('column-name'),
            Tokens.Punctuator(')'),
            Tokens.Keyword('AS'),
            Tokens.Punctuator('('),
            Tokens.Keyword('SELECT'),
            Tokens.Identifier('result-column'),
            Tokens.Punctuator(')')
          ]
        );
      });

      it('table-name(column-name1, column-name2) AS ([select-stmt])', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.CommonTableExpression(
              Nodes.CteTableName(
                Nodes._Identifier('table-name'),
                [
                  Nodes._Identifier('column-name1'),
                  Nodes._Identifier('column-name2')
                ]
              ),
              Nodes.SelectStmt(
                null,
                [
                  Nodes._SelectClause(
                    null,
                    [
                      Nodes.ResultColumn(
                        Nodes._Identifier('result-column')
                      )
                    ],
                    null,
                    null,
                    null,
                    []
                  )
                ],
                null
              )
            )
          ),
          [
            Tokens.Identifier('table-name'),
            Tokens.Punctuator('('),
            Tokens.Identifier('column-name1'),
            Tokens.Punctuator(','),
            Tokens.Identifier('column-name2'),
            Tokens.Punctuator(')'),
            Tokens.Keyword('AS'),
            Tokens.Punctuator('('),
            Tokens.Keyword('SELECT'),
            Tokens.Identifier('result-column'),
            Tokens.Punctuator(')')
          ]
        );
      });
    });

    describe('ConflictClause', () => {
      it('ON CONFLICT ROLLBACK/ABORT/FAIL/IGNORE/REPLACE', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.ConflictClause('ROLLBACK')
          ),
          [
            Tokens.Keyword('ON'),
            Tokens.Keyword('CONFLICT'),
            Tokens.Keyword('ROLLBACK')
          ]
        );
      });
    });

    describe('ForeignKeyClause', () => {
      it('REFERENCES foreign-table', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.ForeignKeyClause(
              Nodes._Identifier('foreign-table'),
              [],
              [],
              null
            )
          ),
          [
            Tokens.Keyword('REFERENCES'),
            Tokens.Identifier('foreign-table')
          ]
        );
      });

      it('REFERENCES foreign-table(column-name)', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.ForeignKeyClause(
              Nodes._Identifier('foreign-table'),
              [
                Nodes._Identifier('column-name')
              ],
              [],
              null
            )
          ),
          [
            Tokens.Keyword('REFERENCES'),
            Tokens.Identifier('foreign-table'),
            Tokens.Punctuator('('),
            Tokens.Identifier('column-name'),
            Tokens.Punctuator(')')
          ]
        );
      });

      it('REFERENCES foreign-table(column-name1, column-name2)', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.ForeignKeyClause(
              Nodes._Identifier('foreign-table'),
              [
                Nodes._Identifier('column-name1'),
                Nodes._Identifier('column-name2')
              ],
              [],
              null
            )
          ),
          [
            Tokens.Keyword('REFERENCES'),
            Tokens.Identifier('foreign-table'),
            Tokens.Punctuator('('),
            Tokens.Identifier('column-name1'),
            Tokens.Punctuator(','),
            Tokens.Identifier('column-name2'),
            Tokens.Punctuator(')')
          ]
        );
      });

      it('REFERENCES foreign-table ON {DELETE|UPDATE} ' +
        '{SET NULL|SET DEFAULT|CASCADE|RESTRICT|NO ACTION}', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.ForeignKeyClause(
              Nodes._Identifier('foreign-table'),
              [],
              [
                Nodes._OnClause(
                  'DELETE',
                  'SET NULL'
                )
              ],
              null
            )
          ),
          [
            Tokens.Keyword('REFERENCES'),
            Tokens.Identifier('foreign-table'),
            Tokens.Keyword('ON'),
            Tokens.Keyword('DELETE'),
            Tokens.Keyword('SET'),
            Tokens.Keyword('NULL')
          ]
        );
      });

      it('REFERENCES foreign-table MATCH name', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.ForeignKeyClause(
              Nodes._Identifier('foreign-table'),
              [],
              [
                Nodes._MatchClause(
                  Nodes._Identifier('name')
                )
              ],
              null
            )
          ),
          [
            Tokens.Keyword('REFERENCES'),
            Tokens.Identifier('foreign-table'),
            Tokens.Keyword('MATCH'),
            Tokens.Identifier('name')
          ]
        );
      });

      it('REFERENCES foreign-table DEFERRABLE', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.ForeignKeyClause(
              Nodes._Identifier('foreign-table'),
              [],
              [],
              Nodes._DeferrableClause(
                false,
                null
              )
            )
          ),
          [
            Tokens.Keyword('REFERENCES'),
            Tokens.Identifier('foreign-table'),
            Tokens.Keyword('DEFERRABLE')
          ]
        );
      });

      it('REFERENCES foreign-table(column-name1, column-name2) ON UPDATE RESTRICT' +
        'MATCH name NOT DEFERRABLE INITIALLY DEFERRED', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.ForeignKeyClause(
              Nodes._Identifier('foreign-table'),
              [
                Nodes._Identifier('column-name1'),
                Nodes._Identifier('column-name2')
              ],
              [
                Nodes._OnClause(
                  'UPDATE',
                  'RESTRICT'
                ),
                Nodes._MatchClause(
                  Nodes._Identifier('name')
                )
              ],
              Nodes._DeferrableClause(
                true,
                'DEFERRED'
              )
            )
          ),
          [
            Tokens.Keyword('REFERENCES'),
            Tokens.Identifier('foreign-table'),
            Tokens.Punctuator('('),
            Tokens.Identifier('column-name1'),
            Tokens.Punctuator(','),
            Tokens.Identifier('column-name2'),
            Tokens.Punctuator(')'),
            Tokens.Keyword('ON'),
            Tokens.Keyword('UPDATE'),
            Tokens.Keyword('RESTRICT'),
            Tokens.Keyword('MATCH'),
            Tokens.Identifier('name'),
            Tokens.Keyword('NOT'),
            Tokens.Keyword('DEFERRABLE'),
            Tokens.Keyword('INITIALLY'),
            Tokens.Keyword('DEFERRED')
          ]
        );
      });
    });

    describe('FrameSpec', () => {
      it('RANGE BETWEEN UNBOUNDED PRECEDING AND [expr] PRECEDING', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.FrameSpec(
              'RANGE',
              Nodes._FrameSpecBetweenClause(
                'UNBOUNDED PRECEDING',
                Nodes._FrameSpecExprClause(
                  Nodes._Identifier('expr'),
                  'PRECEDING'
                )
              ),
              null
            )
          ),
          [
            Tokens.Keyword('RANGE'),
            Tokens.Keyword('BETWEEN'),
            Tokens.Keyword('UNBOUNDED'),
            Tokens.Keyword('PRECEDING'),
            Tokens.Keyword('AND'),
            Tokens.Identifier('expr'),
            Tokens.Keyword('PRECEDING')
          ]
        );
      });
    });

    describe('QualifiedTableName', () => {
      it('table-name', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.QualifiedTableName(
              Nodes._Identifier('table-name'),
              null,
              null
            )
          ),
          [
            Tokens.Identifier('table-name')
          ]
        );
      });

      it('schema-name.table-name', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.QualifiedTableName(
              Nodes._Path(
                Nodes._Identifier('schema-name'),
                Nodes._Identifier('table-name')
              ),
              null,
              null
            )
          ),
          [
            Tokens.Identifier('schema-name'),
            Tokens.Punctuator('.'),
            Tokens.Identifier('table-name')
          ]
        );
      });

      it('table-name AS alias', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.QualifiedTableName(
              Nodes._Identifier('table-name'),
              Nodes._Identifier('alias'),
              null
            )
          ),
          [
            Tokens.Identifier('table-name'),
            Tokens.Keyword('AS'),
            Tokens.Identifier('alias')
          ]
        );
      });

      it('table-name INDEXED BY index-name', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.QualifiedTableName(
              Nodes._Identifier('table-name'),
              null,
              Nodes._Identifier('index-name')
            )
          ),
          [
            Tokens.Identifier('table-name'),
            Tokens.Keyword('INDEXED'),
            Tokens.Keyword('BY'),
            Tokens.Identifier('index-name')
          ]
        );
      });

      it('table-name NOT INDEXED', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.QualifiedTableName(
              Nodes._Identifier('table-name'),
              null,
              false
            )
          ),
          [
            Tokens.Identifier('table-name'),
            Tokens.Keyword('NOT'),
            Tokens.Keyword('INDEXED')
          ]
        );
      });

      it('schema-name.table-name AS alias INDEX BY index-name', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.QualifiedTableName(
              Nodes._Path(
                Nodes._Identifier('schema-name'),
                Nodes._Identifier('table-name')
              ),
              Nodes._Identifier('alias'),
              Nodes._Identifier('index-name')
            )
          ),
          [
            Tokens.Identifier('schema-name'),
            Tokens.Punctuator('.'),
            Tokens.Identifier('table-name'),
            Tokens.Keyword('AS'),
            Tokens.Identifier('alias'),
            Tokens.Keyword('INDEXED'),
            Tokens.Keyword('BY'),
            Tokens.Identifier('index-name')
          ]
        );
      });
    });

    describe('SelectStmt', () => {
      it('SELECT [result-column]', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.SelectStmt(
              null,
              [
                Nodes._SelectClause(
                  null,
                  [
                    Nodes.ResultColumn(
                      Nodes._Identifier('result-column')
                    )
                  ],
                  null,
                  null,
                  null,
                  []
                )
              ],
              null
            )
          ),
          [
            Tokens.Keyword('SELECT'),
            Tokens.Identifier('result-column')
          ]
        );
      });

      it('SELECT [result-column1], [result-column2]', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.SelectStmt(
              null,
              [
                Nodes._SelectClause(
                  null,
                  [
                    Nodes.ResultColumn(
                      Nodes._Identifier('result-column1')
                    ),
                    Nodes.ResultColumn(
                      Nodes._Identifier('result-column2')
                    )
                  ],
                  null,
                  null,
                  null,
                  []
                )
              ],
              null
            )
          ),
          [
            Tokens.Keyword('SELECT'),
            Tokens.Identifier('result-column1'),
            Tokens.Punctuator(','),
            Tokens.Identifier('result-column2')
          ]
        );
      });

      it('SELECT DISTINCT/ALL [result-column]', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.SelectStmt(
              null,
              [
                Nodes._SelectClause(
                  'DISTINCT',
                  [
                    Nodes.ResultColumn(
                      Nodes._Identifier('result-column')
                    )
                  ],
                  null,
                  null,
                  null,
                  []
                )
              ],
              null
            )
          ),
          [
            Tokens.Keyword('SELECT'),
            Tokens.Keyword('DISTINCT'),
            Tokens.Identifier('result-column')
          ]
        );
      });

      it('[with-clause] SELECT [result-column]', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.SelectStmt(
              Nodes.WithClause(
                false,
                [
                  Nodes.CommonTableExpression(
                    Nodes.CteTableName(
                      Nodes._Identifier('table-name'),
                      []
                    ),
                    Nodes.SelectStmt(
                      null,
                      [
                        Nodes._SelectClause(
                          null,
                          [
                            Nodes.ResultColumn(
                              Nodes._Identifier('result-column')
                            )
                          ],
                          null,
                          null,
                          null,
                          []
                        )
                      ],
                      null
                    )
                  )
                ]
              ),
              [
                Nodes._SelectClause(
                  null,
                  [
                    Nodes.ResultColumn(
                      Nodes._Identifier('result-column')
                    )
                  ],
                  null,
                  null,
                  null,
                  []
                )
              ],
              null
            )
          ),
          [
            Tokens.Keyword('WITH'),
            Tokens.Identifier('table-name'),
            Tokens.Keyword('AS'),
            Tokens.Punctuator('('),
            Tokens.Keyword('SELECT'),
            Tokens.Identifier('result-column'),
            Tokens.Punctuator(')'),
            Tokens.Keyword('SELECT'),
            Tokens.Identifier('result-column')
          ]
        );
      });

      it('SELECT [result-column] FROM table-name', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.SelectStmt(
              null,
              [
                Nodes._SelectClause(
                  null,
                  [
                    Nodes.ResultColumn(
                      Nodes._Identifier('result-column')
                    )
                  ],
                  Nodes.QualifiedTableName(
                    Nodes._Identifier('table-name'),
                    null,
                    null
                  ),
                  null,
                  null,
                  []
                )
              ],
              null
            )
          ),
          [
            Tokens.Keyword('SELECT'),
            Tokens.Identifier('result-column'),
            Tokens.Keyword('FROM'),
            Tokens.Identifier('table-name')
          ]
        );
      });

      it('SELECT [result-column] FROM table-name AS table-alias', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.SelectStmt(
              null,
              [
                Nodes._SelectClause(
                  null,
                  [
                    Nodes.ResultColumn(
                      Nodes._Identifier('result-column')
                    )
                  ],
                  Nodes.QualifiedTableName(
                    Nodes._Identifier('table-name'),
                    Nodes._Identifier('table-alias'),
                    null
                  ),
                  null,
                  null,
                  []
                )
              ],
              null
            )
          ),
          [
            Tokens.Keyword('SELECT'),
            Tokens.Identifier('result-column'),
            Tokens.Keyword('FROM'),
            Tokens.Identifier('table-name'),
            Tokens.Keyword('AS'),
            Tokens.Identifier('table-alias')
          ]
        );
      });

      it('SELECT [result-column] FROM table-name AS table-alias NOT INDEXED', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.SelectStmt(
              null,
              [
                Nodes._SelectClause(
                  null,
                  [
                    Nodes.ResultColumn(
                      Nodes._Identifier('result-column')
                    )
                  ],
                  Nodes.QualifiedTableName(
                    Nodes._Identifier('table-name'),
                    Nodes._Identifier('table-alias'),
                    false
                  ),
                  null,
                  null,
                  []
                )
              ],
              null
            )
          ),
          [
            Tokens.Keyword('SELECT'),
            Tokens.Identifier('result-column'),
            Tokens.Keyword('FROM'),
            Tokens.Identifier('table-name'),
            Tokens.Keyword('AS'),
            Tokens.Identifier('table-alias'),
            Tokens.Keyword('NOT'),
            Tokens.Keyword('INDEXED')
          ]
        );
      });

      it('SELECT [result-column] FROM schema-name.table-name', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.SelectStmt(
              null,
              [
                Nodes._SelectClause(
                  null,
                  [
                    Nodes.ResultColumn(
                      Nodes._Identifier('result-column')
                    )
                  ],
                  Nodes.QualifiedTableName(
                    Nodes._Path(
                      Nodes._Identifier('schema-name'),
                      Nodes._Identifier('table-name')
                    ),
                    null,
                    null
                  ),
                  null,
                  null,
                  []
                )
              ],
              null
            )
          ),
          [
            Tokens.Keyword('SELECT'),
            Tokens.Identifier('result-column'),
            Tokens.Keyword('FROM'),
            Tokens.Identifier('schema-name'),
            Tokens.Punctuator('.'),
            Tokens.Identifier('table-name')
          ]
        );
      });

      it('SELECT [result-column] FROM table-function-name([expr])', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.SelectStmt(
              null,
              [
                Nodes._SelectClause(
                  null,
                  [
                    Nodes.ResultColumn(
                      Nodes._Identifier('result-column')
                    )
                  ],
                  Nodes._TableCallClause(
                    Nodes._Identifier('table-function-name'),
                    [
                      Nodes._Identifier('expr')
                    ],
                    null
                  ),
                  null,
                  null,
                  []
                )
              ],
              null
            )
          ),
          [
            Tokens.Keyword('SELECT'),
            Tokens.Identifier('result-column'),
            Tokens.Keyword('FROM'),
            Tokens.Identifier('table-function-name'),
            Tokens.Punctuator('('),
            Tokens.Identifier('expr'),
            Tokens.Punctuator(')')
          ]
        );
      });

      it('SELECT [result-column] FROM schema-name.table-function-name' +
        '([expr1], [expr2]) table-alias', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.SelectStmt(
              null,
              [
                Nodes._SelectClause(
                  null,
                  [
                    Nodes.ResultColumn(
                      Nodes._Identifier('result-column')
                    )
                  ],
                  Nodes._TableCallClause(
                    Nodes._Path(
                      Nodes._Identifier('schema-name'),
                      Nodes._Identifier('table-function-name')
                    ),
                    [
                      Nodes._Identifier('expr1'),
                      Nodes._Identifier('expr2')
                    ],
                    Nodes._Identifier('table-alias')
                  ),
                  null,
                  null,
                  []
                )
              ],
              null
            )
          ),
          [
            Tokens.Keyword('SELECT'),
            Tokens.Identifier('result-column'),
            Tokens.Keyword('FROM'),
            Tokens.Identifier('schema-name'),
            Tokens.Punctuator('.'),
            Tokens.Identifier('table-function-name'),
            Tokens.Punctuator('('),
            Tokens.Identifier('expr1'),
            Tokens.Punctuator(','),
            Tokens.Identifier('expr2'),
            Tokens.Punctuator(')'),
            Tokens.Identifier('table-alias')
          ]
        );
      });

      it('SELECT [result-column] FROM (SELECT 1)', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.SelectStmt(
              null,
              [
                Nodes._SelectClause(
                  null,
                  [
                    Nodes.ResultColumn(
                      Nodes._Identifier('result-column')
                    )
                  ],
                  Nodes._TableSelectClause(
                    Nodes.SelectStmt(
                      null,
                      [
                        Nodes._SelectClause(
                          null,
                          [
                            Nodes.ResultColumn(
                              Nodes._NumericLiteral(1)
                            )
                          ],
                          null,
                          null,
                          null,
                          []
                        )
                      ],
                      null
                    ),
                    null
                  ),
                  null,
                  null,
                  []
                )
              ],
              null
            )
          ),
          [
            Tokens.Keyword('SELECT'),
            Tokens.Identifier('result-column'),
            Tokens.Keyword('FROM'),
            Tokens.Punctuator('('),
            Tokens.Keyword('SELECT'),
            Tokens.Numeric('1'),
            Tokens.Punctuator(')')
          ]
        );
      });

      it('SELECT [result-column] FROM (SELECT 1) table-alias', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.SelectStmt(
              null,
              [
                Nodes._SelectClause(
                  null,
                  [
                    Nodes.ResultColumn(
                      Nodes._Identifier('result-column')
                    )
                  ],
                  Nodes._TableSelectClause(
                    Nodes.SelectStmt(
                      null,
                      [
                        Nodes._SelectClause(
                          null,
                          [
                            Nodes.ResultColumn(
                              Nodes._NumericLiteral(1)
                            )
                          ],
                          null,
                          null,
                          null,
                          []
                        )
                      ],
                      null
                    ),
                    Nodes._Identifier('table-alias')
                  ),
                  null,
                  null,
                  []
                )
              ],
              null
            )
          ),
          [
            Tokens.Keyword('SELECT'),
            Tokens.Identifier('result-column'),
            Tokens.Keyword('FROM'),
            Tokens.Punctuator('('),
            Tokens.Keyword('SELECT'),
            Tokens.Numeric('1'),
            Tokens.Punctuator(')'),
            Tokens.Identifier('table-alias')
          ]
        );
      });

      it('SELECT [result-column] FROM ((SELECT 1), table-name AS table-alias)', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.SelectStmt(
              null,
              [
                Nodes._SelectClause(
                  null,
                  [
                    Nodes.ResultColumn(
                      Nodes._Identifier('result-column')
                    )
                  ],
                  Nodes._TableQueryClause(
                    [
                      Nodes._TableSelectClause(
                        Nodes.SelectStmt(
                          null,
                          [
                            Nodes._SelectClause(
                              null,
                              [
                                Nodes.ResultColumn(
                                  Nodes._NumericLiteral(1)
                                )
                              ],
                              null,
                              null,
                              null,
                              []
                            )
                          ],
                          null
                        ),
                        null
                      ),
                      Nodes.QualifiedTableName(
                        Nodes._Identifier('table-name'),
                        Nodes._Identifier('table-alias'),
                        null
                      )
                    ]
                  ),
                  null,
                  null,
                  []
                )
              ],
              null
            )
          ),
          [
            Tokens.Keyword('SELECT'),
            Tokens.Identifier('result-column'),
            Tokens.Keyword('FROM'),
            Tokens.Punctuator('('),
            Tokens.Punctuator('('),
            Tokens.Keyword('SELECT'),
            Tokens.Numeric('1'),
            Tokens.Punctuator(')'),
            Tokens.Punctuator(','),
            Tokens.Identifier('table-name'),
            Tokens.Keyword('AS'),
            Tokens.Identifier('table-alias'),
            Tokens.Punctuator(')')
          ]
        );
      });

      it('SELECT [result-column] WHERE [expr]', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.SelectStmt(
              null,
              [
                Nodes._SelectClause(
                  null,
                  [
                    Nodes.ResultColumn(
                      Nodes._Identifier('result-column')
                    )
                  ],
                  null,
                  Nodes._Identifier('expr'),
                  null,
                  []
                )
              ],
              null
            )
          ),
          [
            Tokens.Keyword('SELECT'),
            Tokens.Identifier('result-column'),
            Tokens.Keyword('WHERE'),
            Tokens.Identifier('expr')
          ]
        );
      });

      it('SELECT [result-column] GROUP BY [expr]', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.SelectStmt(
              null,
              [
                Nodes._SelectClause(
                  null,
                  [
                    Nodes.ResultColumn(
                      Nodes._Identifier('result-column')
                    )
                  ],
                  null,
                  null,
                  Nodes._GroupByClause(
                    [
                      Nodes._Identifier('expr')
                    ],
                    null
                  ),
                  []
                )
              ],
              null
            )
          ),
          [
            Tokens.Keyword('SELECT'),
            Tokens.Identifier('result-column'),
            Tokens.Keyword('GROUP'),
            Tokens.Keyword('BY'),
            Tokens.Identifier('expr')
          ]
        );
      });

      it('SELECT [result-column] GROUP BY [expr1], [expr2]', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.SelectStmt(
              null,
              [
                Nodes._SelectClause(
                  null,
                  [
                    Nodes.ResultColumn(
                      Nodes._Identifier('result-column')
                    )
                  ],
                  null,
                  null,
                  Nodes._GroupByClause(
                    [
                      Nodes._Identifier('expr1'),
                      Nodes._Identifier('expr2')
                    ],
                    null
                  ),
                  []
                )
              ],
              null
            )
          ),
          [
            Tokens.Keyword('SELECT'),
            Tokens.Identifier('result-column'),
            Tokens.Keyword('GROUP'),
            Tokens.Keyword('BY'),
            Tokens.Identifier('expr1'),
            Tokens.Punctuator(','),
            Tokens.Identifier('expr2')
          ]
        );
      });

      it('SELECT [result-column] GROUP BY [expr1] HAVING [expr2]', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.SelectStmt(
              null,
              [
                Nodes._SelectClause(
                  null,
                  [
                    Nodes.ResultColumn(
                      Nodes._Identifier('result-column')
                    )
                  ],
                  null,
                  null,
                  Nodes._GroupByClause(
                    [
                      Nodes._Identifier('expr1')
                    ],
                    Nodes._Identifier('expr2')
                  ),
                  []
                )
              ],
              null
            )
          ),
          [
            Tokens.Keyword('SELECT'),
            Tokens.Identifier('result-column'),
            Tokens.Keyword('GROUP'),
            Tokens.Keyword('BY'),
            Tokens.Identifier('expr1'),
            Tokens.Keyword('HAVING'),
            Tokens.Identifier('expr2')
          ]
        );
      });

      it('SELECT [result-column] WINDOW window-name AS window-defn', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.SelectStmt(
              null,
              [
                Nodes._SelectClause(
                  null,
                  [
                    Nodes.ResultColumn(
                      Nodes._Identifier('result-column')
                    )
                  ],
                  null,
                  null,
                  null,
                  [
                    Nodes._WindowAsClause(
                      Nodes._Identifier('window-name'),
                      Nodes._Identifier('window-defn')
                    )
                  ]
                )
              ],
              null
            )
          ),
          [
            Tokens.Keyword('SELECT'),
            Tokens.Identifier('result-column'),
            Tokens.Keyword('WINDOW'),
            Tokens.Identifier('window-name'),
            Tokens.Keyword('AS'),
            Tokens.Identifier('window-defn')
          ]
        );
      });

      it('SELECT [result-column] WINDOW [window1], [window2]', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.SelectStmt(
              null,
              [
                Nodes._SelectClause(
                  null,
                  [
                    Nodes.ResultColumn(
                      Nodes._Identifier('result-column')
                    )
                  ],
                  null,
                  null,
                  null,
                  [
                    Nodes._WindowAsClause(
                      Nodes._Identifier('window-name1'),
                      Nodes._Identifier('window-defn1')
                    ),
                    Nodes._WindowAsClause(
                      Nodes._Identifier('window-name2'),
                      Nodes._Identifier('window-defn2')
                    )
                  ]
                )
              ],
              null
            )
          ),
          [
            Tokens.Keyword('SELECT'),
            Tokens.Identifier('result-column'),
            Tokens.Keyword('WINDOW'),
            Tokens.Identifier('window-name1'),
            Tokens.Keyword('AS'),
            Tokens.Identifier('window-defn1'),
            Tokens.Punctuator(','),
            Tokens.Identifier('window-name2'),
            Tokens.Keyword('AS'),
            Tokens.Identifier('window-defn2')
          ]
        );
      });

      it('VALUES (expr)', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.SelectStmt(
              null,
              [
                Nodes._ValuesClause(
                  [
                    Nodes._ValueClause(
                      [
                        Nodes._Identifier('expr')
                      ]
                    )
                  ]
                )
              ],
              null
            )
          ),
          [
            Tokens.Keyword('VALUES'),
            Tokens.Punctuator('('),
            Tokens.Identifier('expr'),
            Tokens.Punctuator(')')
          ]
        );
      });

      it('VALUES (expr1, expr2)', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.SelectStmt(
              null,
              [
                Nodes._ValuesClause(
                  [
                    Nodes._ValueClause(
                      [
                        Nodes._Identifier('expr1'),
                        Nodes._Identifier('expr2')
                      ]
                    )
                  ]
                )
              ],
              null
            )
          ),
          [
            Tokens.Keyword('VALUES'),
            Tokens.Punctuator('('),
            Tokens.Identifier('expr1'),
            Tokens.Punctuator(','),
            Tokens.Identifier('expr2'),
            Tokens.Punctuator(')')
          ]
        );
      });

      it('VALUES (expr1, expr2), (expr)', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.SelectStmt(
              null,
              [
                Nodes._ValuesClause(
                  [
                    Nodes._ValueClause(
                      [
                        Nodes._Identifier('expr1'),
                        Nodes._Identifier('expr2')
                      ]
                    ),
                    Nodes._ValueClause(
                      [
                        Nodes._Identifier('expr')
                      ]
                    )
                  ]
                )
              ],
              null
            )
          ),
          [
            Tokens.Keyword('VALUES'),
            Tokens.Punctuator('('),
            Tokens.Identifier('expr1'),
            Tokens.Punctuator(','),
            Tokens.Identifier('expr2'),
            Tokens.Punctuator(')'),
            Tokens.Punctuator(','),
            Tokens.Punctuator('('),
            Tokens.Identifier('expr'),
            Tokens.Punctuator(')')
          ]
        );
      });

      it('SELECT [result-column] UNION ALL VALUES (expr)', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.SelectStmt(
              null,
              [
                Nodes._SelectClause(
                  null,
                  [
                    Nodes.ResultColumn(
                      Nodes._Identifier('result-column')
                    )
                  ],
                  null,
                  null,
                  null,
                  []
                ),
                Nodes._SelectCompound(
                  'UNION ALL',
                  Nodes._ValuesClause(
                    [
                      Nodes._ValueClause(
                        [
                          Nodes._Identifier('expr')
                        ]
                      )
                    ]
                  )
                )
              ],
              null
            )
          ),
          [
            Tokens.Keyword('SELECT'),
            Tokens.Identifier('result-column'),
            Tokens.Keyword('UNION'),
            Tokens.Keyword('ALL'),
            Tokens.Keyword('VALUES'),
            Tokens.Punctuator('('),
            Tokens.Identifier('expr'),
            Tokens.Punctuator(')')
          ]
        );
      });

      it('SELECT [result-column] ORDER BY [ordering-term]', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.SelectStmt(
              null,
              [
                Nodes._SelectClause(
                  null,
                  [
                    Nodes.ResultColumn(
                      Nodes._Identifier('result-column')
                    )
                  ],
                  null,
                  null,
                  null,
                  []
                )
              ],
              Nodes._LimiterClause(
                [
                  Nodes.OrderingTerm(
                    Nodes.IndexedColumn(
                      Nodes._Identifier('indexed-column'),
                      null,
                      null
                    ),
                    null
                  )
                ],
                null
              )
            )
          ),
          [
            Tokens.Keyword('SELECT'),
            Tokens.Identifier('result-column'),
            Tokens.Keyword('ORDER'),
            Tokens.Keyword('BY'),
            Tokens.Identifier('indexed-column')
          ]
        );
      });

      it('SELECT [result-column] ORDER BY [ordering-term], ' +
        '[expr] COLLATE collation-name ASC NULLS FIRST', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.SelectStmt(
              null,
              [
                Nodes._SelectClause(
                  null,
                  [
                    Nodes.ResultColumn(
                      Nodes._Identifier('result-column')
                    )
                  ],
                  null,
                  null,
                  null,
                  []
                )
              ],
              Nodes._LimiterClause(
                [
                  Nodes.OrderingTerm(
                    Nodes.IndexedColumn(
                      Nodes._Identifier('indexed-column1'),
                      null,
                      null
                    ),
                    null
                  ),
                  Nodes.OrderingTerm(
                    Nodes.IndexedColumn(
                      Nodes._Identifier('indexed-column2'),
                      Nodes._Identifier('collation-name'),
                      'ASC'
                    ),
                    'FIRST'
                  )
                ],
                null
              )
            )
          ),
          [
            Tokens.Keyword('SELECT'),
            Tokens.Identifier('result-column'),
            Tokens.Keyword('ORDER'),
            Tokens.Keyword('BY'),
            Tokens.Identifier('indexed-column1'),
            Tokens.Punctuator(','),
            Tokens.Identifier('indexed-column2'),
            Tokens.Keyword('COLLATE'),
            Tokens.Identifier('collation-name'),
            Tokens.Keyword('ASC'),
            Tokens.Keyword('NULLS'),
            Tokens.Keyword('FIRST')
          ]
        );
      });

      it('SELECT [result-column] LIMIT [expr]', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.SelectStmt(
              null,
              [
                Nodes._SelectClause(
                  null,
                  [
                    Nodes.ResultColumn(
                      Nodes._Identifier('result-column')
                    )
                  ],
                  null,
                  null,
                  null,
                  []
                )
              ],
              Nodes._LimiterClause(
                [],
                Nodes._LimitClause(
                  Nodes._Identifier('expr'),
                  null
                )
              )
            )
          ),
          [
            Tokens.Keyword('SELECT'),
            Tokens.Identifier('result-column'),
            Tokens.Keyword('LIMIT'),
            Tokens.Identifier('expr')
          ]
        );
      });

      it('SELECT [result-column] LIMIT [expr1] OFFSET [expr2]', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.SelectStmt(
              null,
              [
                Nodes._SelectClause(
                  null,
                  [
                    Nodes.ResultColumn(
                      Nodes._Identifier('result-column')
                    )
                  ],
                  null,
                  null,
                  null,
                  []
                )
              ],
              Nodes._LimiterClause(
                [],
                Nodes._LimitClause(
                  Nodes._Identifier('expr1'),
                  Nodes._LimitTailClause(
                    true,
                    Nodes._Identifier('expr2')
                  )
                )
              )
            )
          ),
          [
            Tokens.Keyword('SELECT'),
            Tokens.Identifier('result-column'),
            Tokens.Keyword('LIMIT'),
            Tokens.Identifier('expr1'),
            Tokens.Keyword('OFFSET'),
            Tokens.Identifier('expr2')
          ]
        );
      });

      it('SELECT [result-column] LIMIT [expr1], [expr2]', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.SelectStmt(
              null,
              [
                Nodes._SelectClause(
                  null,
                  [
                    Nodes.ResultColumn(
                      Nodes._Identifier('result-column')
                    )
                  ],
                  null,
                  null,
                  null,
                  []
                )
              ],
              Nodes._LimiterClause(
                [],
                Nodes._LimitClause(
                  Nodes._Identifier('expr1'),
                  Nodes._LimitTailClause(
                    false,
                    Nodes._Identifier('expr2')
                  )
                )
              )
            )
          ),
          [
            Tokens.Keyword('SELECT'),
            Tokens.Identifier('result-column'),
            Tokens.Keyword('LIMIT'),
            Tokens.Identifier('expr1'),
            Tokens.Punctuator(','),
            Tokens.Identifier('expr2')
          ]
        );
      });
    });

    describe('TableOrSubquery', () => {
      it('table-name', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.QualifiedTableName(
              Nodes._Identifier('table-name'),
              null,
              null
            )
          ),
          [
            Tokens.Identifier('table-name')
          ]
        );
      });

      it('table-name AS table-alias', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.QualifiedTableName(
              Nodes._Identifier('table-name'),
              Nodes._Identifier('table-alias'),
              null
            )
          ),
          [
            Tokens.Identifier('table-name'),
            Tokens.Keyword('AS'),
            Tokens.Identifier('table-alias')
          ]
        );
      });

      it('table-name AS table-alias INDEXED BY index-name', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.QualifiedTableName(
              Nodes._Identifier('table-name'),
              Nodes._Identifier('table-alias'),
              Nodes._Identifier('index-name')
            )
          ),
          [
            Tokens.Identifier('table-name'),
            Tokens.Keyword('AS'),
            Tokens.Identifier('table-alias'),
            Tokens.Keyword('INDEXED'),
            Tokens.Keyword('BY'),
            Tokens.Identifier('index-name')
          ]
        );
      });

      it('table-name AS table-alias NOT INDEXED', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.QualifiedTableName(
              Nodes._Identifier('table-name'),
              Nodes._Identifier('table-alias'),
              false
            )
          ),
          [
            Tokens.Identifier('table-name'),
            Tokens.Keyword('AS'),
            Tokens.Identifier('table-alias'),
            Tokens.Keyword('NOT'),
            Tokens.Keyword('INDEXED')
          ]
        );
      });

      it('schema-name.table-name', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes.QualifiedTableName(
              Nodes._Path(
                Nodes._Identifier('schema-name'),
                Nodes._Identifier('table-name')
              ),
              null,
              null
            )
          ),
          [
            Tokens.Identifier('schema-name'),
            Tokens.Punctuator('.'),
            Tokens.Identifier('table-name')
          ]
        );
      });

      it('table-function-name([expr])', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes._TableCallClause(
              Nodes._Identifier('table-function-name'),
              [
                Nodes._Identifier('expr')
              ],
              null
            )
          ),
          [
            Tokens.Identifier('table-function-name'),
            Tokens.Punctuator('('),
            Tokens.Identifier('expr'),
            Tokens.Punctuator(')')
          ]
        );
      });

      it('schema-name.table-function-name([expr1], [expr2]) table-alias', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes._TableCallClause(
              Nodes._Path(
                Nodes._Identifier('schema-name'),
                Nodes._Identifier('table-function-name')
              ),
              [
                Nodes._Identifier('expr1'),
                Nodes._Identifier('expr2')
              ],
              Nodes._Identifier('table-alias')
            )
          ),
          [
            Tokens.Identifier('schema-name'),
            Tokens.Punctuator('.'),
            Tokens.Identifier('table-function-name'),
            Tokens.Punctuator('('),
            Tokens.Identifier('expr1'),
            Tokens.Punctuator(','),
            Tokens.Identifier('expr2'),
            Tokens.Punctuator(')'),
            Tokens.Identifier('table-alias')
          ]
        );
      });

      it('(SELECT 1)', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes._TableSelectClause(
              Nodes.SelectStmt(
                null,
                [
                  Nodes._SelectClause(
                    null,
                    [
                      Nodes.ResultColumn(
                        Nodes._NumericLiteral(1)
                      )
                    ],
                    null,
                    null,
                    null,
                    []
                  )
                ],
                null
              ),
              null
            )
          ),
          [
            Tokens.Punctuator('('),
            Tokens.Keyword('SELECT'),
            Tokens.Numeric('1'),
            Tokens.Punctuator(')')
          ]
        );
      });

      it('(SELECT 1) table-alias', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes._TableSelectClause(
              Nodes.SelectStmt(
                null,
                [
                  Nodes._SelectClause(
                    null,
                    [
                      Nodes.ResultColumn(
                        Nodes._NumericLiteral(1)
                      )
                    ],
                    null,
                    null,
                    null,
                    []
                  )
                ],
                null
              ),
              Nodes._Identifier('table-alias')
            )
          ),
          [
            Tokens.Punctuator('('),
            Tokens.Keyword('SELECT'),
            Tokens.Numeric('1'),
            Tokens.Punctuator(')'),
            Tokens.Identifier('table-alias')
          ]
        );
      });

      it('((SELECT 1), table-name AS table-alias)', () => {
        Chai.assert.deepStrictEqual(
          tokenize(
            Nodes._TableQueryClause(
              [
                Nodes._TableSelectClause(
                  Nodes.SelectStmt(
                    null,
                    [
                      Nodes._SelectClause(
                        null,
                        [
                          Nodes.ResultColumn(
                            Nodes._NumericLiteral(1)
                          )
                        ],
                        null,
                        null,
                        null,
                        []
                      )
                    ],
                    null
                  ),
                  null
                ),
                Nodes.QualifiedTableName(
                  Nodes._Identifier('table-name'),
                  Nodes._Identifier('table-alias'),
                  null
                )
              ]
            )
          ),
          [
            Tokens.Punctuator('('),
            Tokens.Punctuator('('),
            Tokens.Keyword('SELECT'),
            Tokens.Numeric('1'),
            Tokens.Punctuator(')'),
            Tokens.Punctuator(','),
            Tokens.Identifier('table-name'),
            Tokens.Keyword('AS'),
            Tokens.Identifier('table-alias'),
            Tokens.Punctuator(')')
          ]
        );
      });
    });
  });
});
